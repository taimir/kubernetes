# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

input {
  # For tests:
  stdin {
    type => "testing-stuff"
  }

  # Example:
  # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
  file {
    path => "/var/log/containers/*.log"
    sincedb_path => "/var/log/logstash-containers.log.pos"
    type => "kubernetes.containers"
    codec => "json"
    start_position => "beginning"
  }

  # Example:
  # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
  file {
    path => "/var/log/salt/minion"
    sincedb_path => "/var/log/logstash-gcp-salt.log.pos"
    type => "salt"
  }

  # Example:
  # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
  file {
    path => "/var/log/startupscript.log"
    sincedb_path => "/var/log/logstash-startupscript.log.pos"
    type => "syslog"
    tags => ["startupscript"]
  }

  # Examples:
  # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
  # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
  file {
    path => "/var/log/docker.log"
    sincedb_path => "/var/log/logstash-docker.log.pos"
    type => "docker"
  }

  # Example:
  # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
  file {
    path => "/var/log/etcd.log"
    sincedb_path => "/var/log/logstash-etcd.log.pos"
    type => "etcd"
  }

  # Example:
  # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
  file {
    # TODO: all the other fields
    path => "/var/log/kubelet.log"
    sincedb_path => "/var/log/logstash-kubelet.log.pos"
    codec => multiline {
      pattern => "^\w\d{4}"
      what => "next"
    }
    type => "kubelet"
  }

  # Example:
  # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
  file {
    path => "/var/log/kube-apiserver.log"
    sincedb_path => "/var/log/logstash-kube-apiserver.log.pos"
    codec => multiline {
      pattern => "^\w\d{4}"
      what => "next"
    }
    type => "kube-apiserver"
  }

  # Example:
  # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
  file {
    path => "/var/log/kube-controller-manager.log"
    sincedb_path => "/var/log/logstash-kube-controller-manager.log.pos"
    codec => multiline {
      pattern => "^\w\d{4}"
      what => "next"
    }
    type => "kube-controller-manager"
  }

  # Example:
  # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
  file {
    path => "/var/log/kube-scheduler.log"
    sincedb_path => "/var/log/logstash-kube-scheduler.log.pos"
    codec => multiline {
      pattern => "^\w\d{4}"
      what => "next"
    }
    type => "kube-scheduler"
  }
}

filter {
  if [type] == "kubernetes.containers" {
    date {
      match => [ "time" , "%Y-%m-%d'T'%H:%M:%S.%'N'Z" ]
    }
  }

  if [type] == "salt" {
    grok {
      match => [ "message", "^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$"]
    }
    date {
      match => [ "time", "%Y-%m-%d %H:%M:%S"]
    }
  }

  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }

  if [type] == "docker" {
    grok {
      match => ["message", '^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?']
    }
    date {
      match => [ "time", "%Y-%m-%d'T'%H:%M:%S.%'N'Z"]
    }
  }

  if [type] in ["kubelet", "kube-apiserver", "kube-controller-manager", "kube-scheduler"] {
    grok {
      match => ["message", "^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)"]
    }
    date {
      match => [ "time", "%m%d %H:%M:%S.%'N'"]
    }
  }
}
